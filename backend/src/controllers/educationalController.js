const axios = require("axios");
const {
  EDUCATIONAL_CHANNELS,
  buildEducationalQuery,
  filterEducationalContent,
} = require("../utils/educational");

async function educationalChannels(req, res) {
  try {
    const channelVideos = [];
    for (const channelId of EDUCATIONAL_CHANNELS.slice(0, 5)) {
      try {
        const response = await axios.get(
          "https://www.googleapis.com/youtube/v3/search",
          {
            params: {
              part: "snippet",
              channelId,
              type: "video",
              order: "date",
              maxResults: 5,
              key: process.env.YOUTUBE_API_KEY,
            },
          }
        );
        channelVideos.push(...response.data.items);
      } catch (e) {
        console.error("Channel fetch error", channelId, e.message);
      }
    }
    res.json({ kind: "youtube#searchListResponse", items: channelVideos });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
}

async function youtubeVideosWithSubtitles(req, res) {
  const { subject, level, language = "en", maxResults = 20 } = req.query;
  try {
    const searchQuery = buildEducationalQuery(subject, level);
    const searchResp = await axios.get(
      "https://www.googleapis.com/youtube/v3/search",
      {
        params: {
          part: "snippet",
          q: searchQuery,
          type: "video",
          order: "relevance",
          maxResults: parseInt(maxResults) * 2,
          videoDuration: "medium",
          videoDefinition: "any",
          regionCode: "US",
          key: process.env.YOUTUBE_API_KEY,
        },
      }
    );
    const videoIds = searchResp.data.items.map((i) => i.id.videoId).join(",");
    if (!videoIds)
      return res.json({
        kind: "youtube#searchListResponse",
        items: [],
        message: "No videos found",
      });
    const videosResp = await axios.get(
      "https://www.googleapis.com/youtube/v3/videos",
      {
        params: {
          part: "snippet,statistics,contentDetails",
          id: videoIds,
          key: process.env.YOUTUBE_API_KEY,
        },
      }
    );
    const videosWithCaptions = [];
    for (const video of videosResp.data.items) {
      try {
        const captionsResp = await axios.get(
          "https://www.googleapis.com/youtube/v3/captions",
          {
            params: {
              part: "snippet",
              videoId: video.id,
              key: process.env.YOUTUBE_API_KEY,
            },
          }
        );
        const available = captionsResp.data.items.filter((c) => {
          const lang = c.snippet.language;
          return (
            language === "any" || lang === language || lang.startsWith(language)
          );
        });
        if (available.length) {
          video.captions = {
            available: true,
            languages: captionsResp.data.items.map((c) => ({
              language: c.snippet.language,
              name: c.snippet.name,
              trackKind: c.snippet.trackKind,
              isAutoGenerated: c.snippet.trackKind === "asr",
            })),
          };
          videosWithCaptions.push(video);
        }
        if (videosWithCaptions.length >= parseInt(maxResults)) break;
      } catch (e) {
        console.error("Caption check error", video.id, e.message);
      }
    }
    const educationalVideos = filterEducationalContent(videosWithCaptions);
    res.json({
      kind: "youtube#searchListResponse",
      items: educationalVideos.slice(0, parseInt(maxResults)),
      totalResults: educationalVideos.length,
      query: { subject, level, language, maxResults },
    });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
}

module.exports = { educationalChannels, youtubeVideosWithSubtitles };
